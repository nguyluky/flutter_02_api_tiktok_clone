generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  username       String    @unique
  email          String    @unique
  passwordHash   String
  avatarUrl      String?
  bio            String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  videos         Video[]   @relation("UserVideos")
  comments       Comment[]
  likes          Like[]
  followers      Follow[]  @relation("FolloweeFollows")
  following      Follow[]  @relation("FollowerFollows")
  sentMessages   Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
}

model Video {
  id          String    @id @default(uuid())
  title       String?
  description String?
  videoUrl    String
  thumbnail   String?
  createdAt   DateTime  @default(now())

  userId      String
  user        User      @relation("UserVideos", fields: [userId], references: [id])

  comments    Comment[]
  likes       Like[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())

  userId    String
  videoId   String

  user      User     @relation(fields: [userId], references: [id])
  video     Video    @relation(fields: [videoId], references: [id])
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  videoId   String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  video     Video    @relation(fields: [videoId], references: [id])

  @@unique([userId, videoId])
}

model Follow {
  id           String   @id @default(uuid())
  followerId   String
  followeeId   String
  createdAt    DateTime @default(now())

  follower     User     @relation("FollowerFollows", fields: [followerId], references: [id])
  followee     User     @relation("FolloweeFollows", fields: [followeeId], references: [id])

  @@unique([followerId, followeeId])
}

model Message {
  id          String   @id @default(uuid())
  content     String
  createdAt   DateTime @default(now())
  senderId    String
  receiverId  String
  isSeen      Boolean  @default(false)

  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

